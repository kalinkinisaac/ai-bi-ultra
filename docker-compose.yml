version: "3.9"
services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80" # Nginx will be accessible on port 80 on the host
      - "8181:8181" # Nginx will be accessible on port 8181 on the host
    volumes:
#      - ./frontend/dist:/usr/share/nginx/html:ro # Assumes your frontend build output is in the `frontend/dist` directory
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Assumes your custom Nginx configuration is in the `nginx/nginx.conf` file
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro # Assumes your custom Nginx configuration is in the `nginx/nginx.conf` file
    depends_on:
      web:
        condition: service_started
      app:
        condition: service_started

    networks:
      - backendnetwork

  web:
    build:
      context: ./frontend
      # Uncomment the line below for development
      dockerfile: development.Dockerfile # Use this for development
      # Uncomment the line below for production
      # dockerfile: Dockerfile # Use this for production
    ports:
      - "8080:8080" # Match the port exposed by your dev server, e.g., Vue CLI serves on port 8080 by default
    volumes:
      - ./frontend:/app  # Mounts the code into the container
      - /app/node_modules # To avoid replacing node_modules with a host's folder
      - /app/dist # To avoid replacing node_modules with a host's folder
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backendnetwork

  webnew:
    build:
      context: ./frontend-new
      # Uncomment the line below for development
      dockerfile: Dockerfile # Use this for development
      # Uncomment the line below for production
      # dockerfile: Dockerfile # Use this for production
    ports:
      - "8081:8081" # Match the port exposed by your dev server, e.g., Vue CLI serves on port 8080 by default
    volumes:
      - ./frontend-new:/app  # Mounts the code into the container
      - /app/node_modules # To avoid replacing node_modules with a host's folder
      - /app/dist # To avoid replacing node_modules with a host's folder
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backendnetwork

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8087:${CORE_PORT:-80}"
    environment:
      - CORE_PORT=${CORE_PORT:-80}
    command: uvicorn dataherald.app:app --host 0.0.0.0 --port ${CORE_PORT:-80} --log-config log_config.yml --log-level debug --reload
    stdin_open: true
    tty: true
    volumes:
      - ./dataherald:/app/dataherald
    depends_on:
      - db
      - mongodb
    networks:
      - backendnetwork
    env_file: .env
  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./initdb.d/:/docker-entrypoint-initdb.d/
      - ./dbdata/mongo_data/data:/data/db/
      - ./dbdata/mongo_data/db_config:/data/configdb/
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGODB_DB_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGODB_DB_PASSWORD}"
      MONGO_INITDB_DATABASE: "${MONGODB_DB_NAME}"
    networks:
      - backendnetwork

#  db:
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#    ports:
#      - '5433:5432'
#    volumes:
#      - db:/var/lib/postgresql/data
#    networks:
#      - backendnetwork
  db:
    image: 'postgres:16'
    environment:
      POSTGRES_USER: supertokens_user
      POSTGRES_PASSWORD: somePassword
      POSTGRES_DB: supertokens
    ports:
      - 5332:5432
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', 'supertokens_user', '-d', 'supertokens' ]
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.0.2
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@db:5432/supertokens"
    networks:
      - backendnetwork
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db:
    driver: local
networks:
  backendnetwork:
    external: true
